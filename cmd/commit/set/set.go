package set

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/spf13/cobra"

	"github.com/selimacerbas/flow/internal/utils"
)

type SetCmdOptions struct {
	Bin string // CLI binary name or launcher: e.g. "flow", "./flow", "/usr/local/bin/flow", or "go run ."
}

var defaults = &SetCmdOptions{
	Bin: "./flow",
}

var SetCmd = &cobra.Command{
	Use:   "set",
	Short: "Install (or reinstall) the git commit-msg hook for this repo",
	Run: func(cmd *cobra.Command, _ []string) {
		d := defaults

		root, err := utils.DetectProjectRoot()
		if err != nil {
			log.Fatalf("failed to detect project root: %v", err)
		}

		hookPath := filepath.Join(root, ".git", "hooks", "commit-msg")
		if err := os.MkdirAll(filepath.Dir(hookPath), 0o755); err != nil {
			log.Fatalf("failed to ensure hooks dir: %v", err)
		}

		var contents string

		// If user wants to run via go, make sure we run in repo root (module context).
		if strings.HasPrefix(d.Bin, "go ") {
			// Example: d.Bin == "go run ."
			contents = fmt.Sprintf(`#!/bin/sh
# Generated by %s commit set
cd %q || exit 1
exec %s commit hook "$1"
`, d.Bin, root, d.Bin)
		} else {
			// Resolve binary path:
			bin := d.Bin
			// If it has a path separator and isn't absolute, make it relative to repo root (e.g. "./flow")
			if strings.ContainsRune(bin, os.PathSeparator) && !filepath.IsAbs(bin) {
				bin = filepath.Join(root, bin)
			}
			// If it has no separator (e.g. "flow"), try PATH lookup
			if !strings.ContainsRune(bin, os.PathSeparator) {
				if p, err := exec.LookPath(bin); err == nil {
					bin = p
				}
			}
			abs, err := filepath.Abs(bin)
			if err != nil {
				log.Fatalf("failed to resolve binary path %q: %v", bin, err)
			}

			contents = fmt.Sprintf(`#!/bin/sh
# Generated by %s commit set
exec "%s" commit hook "$1"
`, d.Bin, abs)
		}

		if err := os.WriteFile(hookPath, []byte(contents), 0o755); err != nil {
			log.Fatalf("failed to write commit-msg hook: %v", err)
		}

		fmt.Println("commit-msg hook installed.")
	},
}

func init() {
	d := defaults
	f := SetCmd.Flags()
	f.StringVar(&d.Bin, "bin", d.Bin, "CLI binary or launcher (e.g. flow, ./flow, /usr/local/bin/flow, or 'go run .')")
}
